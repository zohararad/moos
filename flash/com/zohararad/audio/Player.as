package com.zohararad.audio{		import flash.display.LoaderInfo;	import flash.display.MovieClip;	import flash.events.*;	import flash.external.ExternalInterface;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.net.URLRequest;	import flash.system.Security;	import flash.utils.Timer;		public class Player extends MovieClip{				private var autoPlay:Boolean = false;		private var flashVars:Object;		private var instance:String;		private var playing:Boolean = false;		private var position:Number = 0;		private var song:SoundChannel;		private var sound:Sound;		private var soundUrl:String;		private var timer:Timer;		private var volume:Number = 100;				public function Player():void{			init();		}						private function init():void{			Security.allowDomain('*');			//flashVars = Application.application.parameters;			flashVars = LoaderInfo(this.root.loaderInfo).parameters;			instance = flashVars.instance ? flashVars.instance+'.' : 'moos.';			autoPlay = flashVars.autoPlay ? (flashVars.autoPlay == 'true' || flashVars.autoPlay == '1' ? true : false)  : false;			timer = new Timer(250);			timer.addEventListener(TimerEvent.TIMER,onPlayback);			checkIfAvailable();			log('init');		}				public function loadSound(url:String):void{			stopSound();			soundUrl = url;			var req:URLRequest = new URLRequest(soundUrl);							sound = new Sound();			sound.load(req);			attachSoundEvents();			log('loadFile');		}				public function playSound():void{			if(playing){				return;			}			if(sound == null){				loadSound(soundUrl);			}			song = sound.play(position);			song.addEventListener(Event.SOUND_COMPLETE,onSongComplete);			timer.start();			ExternalInterface.call(instance+"onPlay"); 			playing = true;			log('play');		}				public function pauseSound():void{			if(!playing){				return;			}			position = song.position;			song.stop();			song.removeEventListener(Event.SOUND_COMPLETE,onSongComplete);			timer.stop();			ExternalInterface.call(instance+"onPause"); 			playing = false;			log('pause');		}				public function stopSound():void{			if(!song){				return;			}			song.removeEventListener(Event.SOUND_COMPLETE,onSongComplete);			song.stop();			try{				sound.close();			} catch(e:Error){}			detachSoundEvents();			timer.stop();			ExternalInterface.call(instance+"onStop"); 			playing = false;			song = null;			sound = null;			position = 0;			log('stop');		}				public function seek(pos:Number):void{			pauseSound();			position = pos;			playSound();		}				private function onLoadSound(e:Event):void{			if(autoPlay){				playSound();			}			log('onLoadSound');		}				public function setVolume(v:Number):void{			if(!song){				return;			}			if(v <= 0){				v = 0;			}			if(v >= 100){				v = 100;			}			volume = v;			song.soundTransform = new SoundTransform(volume/100);			log('setVolume: '+v);		}				public function getVolume():Number{			return volume;		}				public function getDownloadProgress():Number{			return Math.floor(sound.bytesLoaded / sound.bytesTotal * 100);		}		public function getBytesLoaded():Number{			return sound.bytesLoaded;		}				public function getBytesTotal():Number{			return sound.bytesTotal;		}		public function getPosition():Number{			return Math.floor(song.position);		}		public function getDuration():Number{			return sound.length;		}				private function bindExternalInterface():void{			ExternalInterface.addCallback('loadSound',loadSound);			ExternalInterface.addCallback('playSound',playSound);			ExternalInterface.addCallback('pauseSound',pauseSound);			ExternalInterface.addCallback('stopSound',stopSound);			ExternalInterface.addCallback('seek',seek);			ExternalInterface.addCallback('setVolume',setVolume);			ExternalInterface.addCallback('getVolume',getVolume);			ExternalInterface.addCallback('getDownloadProgress',getDownloadProgress);			ExternalInterface.addCallback('getBytesLoaded',getBytesLoaded);			ExternalInterface.addCallback('getBytesTotal',getBytesTotal);			ExternalInterface.addCallback('getPosition',getPosition);			ExternalInterface.addCallback('getDuration',getDuration);/**/			log('bindExternalInterface');		}				private function attachSoundEvents():void{			sound.addEventListener(Event.OPEN,onLoadSound);			sound.addEventListener(Event.ID3,onID3);			sound.addEventListener(IOErrorEvent.IO_ERROR,onSoundError);			sound.addEventListener(ProgressEvent.PROGRESS, onSoundProgress);		}				private function detachSoundEvents():void{			sound.removeEventListener(Event.OPEN,onLoadSound);			sound.removeEventListener(Event.ID3,onID3);			sound.removeEventListener(IOErrorEvent.IO_ERROR,onSoundError);			sound.removeEventListener(ProgressEvent.PROGRESS, onSoundProgress);		}				private function onPlayback(e:TimerEvent):void{			var d:Number = getDuration();			var p:Number = getPosition();			ExternalInterface.call(instance+"onPlayback",p,d);		}				private function onSongComplete(e:Event):void{			stopSound();			ExternalInterface.call(instance+"onSongComplete"); 		}				private function onSoundProgress(e:ProgressEvent):void{			ExternalInterface.call(instance+"onSoundProgress",e.bytesLoaded,e.bytesTotal); 		}				private function onSoundError(e:IOErrorEvent):void{			ExternalInterface.call(instance+"onSoundError",e.text); 		}				private function onID3(e:Event):void{			ExternalInterface.call(instance+"onID3", sound.id3); 		}				private function log(msg:String):void{			var prefix:String = 'Flash Debug: ';			ExternalInterface.call(instance+'log',prefix+msg);		}				private function checkIfAvailable():void{			if(ExternalInterface.available){				bindExternalInterface();				ExternalInterface.call(instance+"onSwiffLoad"); 			} else {				var t:Timer = new Timer(500,1);				t.addEventListener(TimerEvent.TIMER,onAvailableTimer);			}		}				private function onAvailableTimer(e:TimerEvent):void{			checkIfAvailable();		}	}}